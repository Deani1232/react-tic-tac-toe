{"version":3,"sources":["components/GameSquare/GameSquare.module.css","components/GameBar/InProgressGameBar/CurrentTurn/CurrentTurn.module.css","components/UI/Button/Button.module.css","components/GameBoard/GameBoard.module.css","components/UI/ComponentBar/ComponentBarItem/ComponentBarItem.module.css","components/UI/ComponentBar/ComponentBar.module.css","components/GameBar/InProgressGameBar/ResetGame/ResetGame.module.css","components/GameBar/WinnerGameBar/PlayerWinMessage/PlayerWinMessage.module.css","hocs/Auxiliary/Auxiliary.js","components/Layout/Layout.js","components/GameSquare/GameSquare.js","components/GameBoard/GameBoard.js","components/GameBar/InProgressGameBar/CurrentTurn/CurrentTurn.js","components/UI/ComponentBar/ComponentBarItem/ComponentBarItem.js","components/UI/ComponentBar/ComponentBar.js","components/UI/Button/Button.js","components/GameBar/InProgressGameBar/ResetGame/ResetGame.js","components/GameBar/InProgressGameBar/InProgressGameBar.js","components/GameBar/WinnerGameBar/PlayerWinMessage/PlayerWinMessage.js","components/GameBar/WinnerGameBar/WinnerGameBar.js","components/GameBar/GameBar.js","containers/TicTacToe/TicTacToe.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","auxiliary","props","children","layout","GameSquare","squareClasses","win","push","classes","Win","className","join","onClick","squareClicked","Content","Table","TableCell","value","GameBoard","gameSquares","squaresPassed","squares","i","squareClick","map","square","key","id","CurrentTurn","Label","Value","currentPlayer","ComponentBarItem","style","width","backgroundColor","color","ComponentBar","height","Button","buttonType","ResetGame","resetGame","InProgressGameBar","alignVertically","PlayerWinMessage","WinnerMessageBlock","winner","WinnerGameBar","GameBar","TicTacToe","state","squareClickHandler","index","squareArray","prevPlayer","setState","checkForWin","possibleWins","player","possibleWin","checkForDraw","resetGameHandler","element","this","Component","App","Layout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b18835dd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameSquare\":\"GameSquare_GameSquare__3-nf9\",\"Win\":\"GameSquare_Win__2cmH4\",\"Content\":\"GameSquare_Content__Y5dfi\",\"Table\":\"GameSquare_Table__TS1vT\",\"TableCell\":\"GameSquare_TableCell__3SP1Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CurrentTurn\":\"CurrentTurn_CurrentTurn__1yRpg\",\"Label\":\"CurrentTurn_Label__3m1qJ\",\"Value\":\"CurrentTurn_Value__3XxvD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3KO29\",\"Success\":\"Button_Success__3gMk1\",\"Danger\":\"Button_Danger__fXxW0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameBoard\":\"GameBoard_GameBoard__WKpaQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ComponentBarItem\":\"ComponentBarItem_ComponentBarItem__3cYLm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ComponentBar\":\"ComponentBar_ComponentBar__1656p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ResetGame\":\"ResetGame_ResetGame__1smCu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WinnerMessageBlock\":\"PlayerWinMessage_WinnerMessageBlock__1YHGZ\"};","const auxiliary = (props) => {\r\n    return (\r\n        props.children\r\n    );\r\n};\r\n\r\nexport default auxiliary;","import React from 'react';\r\nimport Aux from '../../hocs/Auxiliary/Auxiliary';\r\nconst layout = (props) => {\r\n    return (\r\n        <Aux>\r\n            <main>\r\n                {props.children}\r\n            </main>\r\n        </Aux>\r\n    );\r\n};\r\n\r\nexport default layout;","import React from 'react';\r\n\r\nimport classes from './GameSquare.module.css';\r\n\r\nconst GameSquare = (props) => {\r\n\r\n    let squareClasses = [];\r\n\r\n    if (props.win === true) {\r\n        squareClasses.push(classes.GameSquare);\r\n        squareClasses.push(classes.Win);\r\n    } else {\r\n        squareClasses.push(classes.GameSquare);\r\n    }\r\n\r\n    return (\r\n        <div className={squareClasses.join(\" \")} onClick={props.squareClicked}>\r\n            <div className={classes.Content}>\r\n                <div className={classes.Table}>\r\n                    <div className={classes.TableCell}>\r\n                        <p>{props.value}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GameSquare;","import React from 'react';\r\n\r\nimport classes from './GameBoard.module.css';\r\nimport GameSquare from \"../GameSquare/GameSquare\";\r\n\r\nconst GameBoard = (props) => {\r\n\r\n    let gameSquares = [];\r\n    let squaresPassed = [...props.squares];\r\n\r\n    for (let i = 0; i < squaresPassed; i++) {\r\n        gameSquares.push(\r\n            <GameSquare\r\n                value={squaresPassed[i].value}\r\n                win={squaresPassed[i].win}\r\n                squareClicked={\r\n                    () => props.squareClick(i)\r\n                }\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={classes.GameBoard}>\r\n            {\r\n                props.squares.map( (square) => {\r\n                    return (\r\n                        <GameSquare\r\n                            key={square.id + \" square\"}\r\n                            value={square.value}\r\n                            win={square.win}\r\n                            squareClicked={() => props.squareClick(square.id)}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GameBoard;","import React from 'react';\r\n\r\nimport classes from './CurrentTurn.module.css';\r\n\r\nconst CurrentTurn = (props) => {\r\n    return (\r\n        <div className={classes.CurrentTurn}>\r\n            <p className={classes.Label}>Current Turn:</p>\r\n            <p className={classes.Value}>{props.currentPlayer}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrentTurn;","import React from 'react';\r\nimport classes from './ComponentBarItem.module.css';\r\n\r\nconst ComponentBarItem = (props) => {\r\n    return (\r\n        <div className={classes.ComponentBarItem}\r\n             style={\r\n                 {\r\n                     width: props.width+\"%\",\r\n                     backgroundColor: props.color\r\n                 }\r\n             }>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComponentBarItem;","import React from 'react';\r\n\r\nimport classes from './ComponentBar.module.css';\r\n//TODO: Add prop type validation so only Component Bar Items get put here.\r\nconst ComponentBar = (props) => {\r\n\r\n    return (\r\n        <div className={classes.ComponentBar} style={{height: props.height}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComponentBar;","import React from 'react';\r\n\r\nimport classes from './Button.module.css';\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <button onClick={props.onClick} className={[classes.Button, classes[props.buttonType]].join(\" \")}>\r\n            {props.children}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nimport classes from './ResetGame.module.css';\r\nimport Button from \"../../../UI/Button/Button\";\r\n\r\nconst ResetGame = (props) => {\r\n    return (\r\n        <div className={classes.ResetGame}>\r\n            <Button buttonType={\"Success\"} onClick={props.resetGame}>Reset Game</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResetGame;","import React from 'react';\r\nimport CurrentTurn from \"./CurrentTurn/CurrentTurn\";\r\nimport ComponentBarItem from \"../../UI/ComponentBar/ComponentBarItem/ComponentBarItem\";\r\nimport EvenlySpacedComponentBar from \"../../UI/ComponentBar/EvenlySpacedComponentBar/EvenlySpacedComponentBar\";\r\nimport ComponentBar from \"../../UI/ComponentBar/ComponentBar\";\r\nimport ResetGame from \"./ResetGame/ResetGame\";\r\nimport Button from \"../../UI/Button/Button\";\r\n\r\nconst InProgressGameBar = (props) => {\r\n    return (\r\n        <ComponentBar height={\"130px\"} alignVertically={true}>\r\n            <ComponentBarItem color={\"#ffa83e\"} width={100/3}>\r\n            </ComponentBarItem>\r\n            <ComponentBarItem color={\"#ffa83e\"} width={100/3}>\r\n                <ComponentBar>\r\n                    <ResetGame resetGame={props.resetGame}/>\r\n                </ComponentBar>\r\n            </ComponentBarItem>\r\n            <ComponentBarItem color={\"#ffa83e\"} width={100/3}>\r\n                <CurrentTurn currentPlayer={props.currentPlayer}/>\r\n            </ComponentBarItem>\r\n        </ComponentBar>\r\n    );\r\n};\r\n\r\nexport default InProgressGameBar;","import React from 'react';\r\n\r\nimport classes from './PlayerWinMessage.module.css';\r\n\r\nconst PlayerWinMessage = (props) => {\r\n    return (\r\n        <div className={classes.WinnerMessageBlock}>\r\n            <p>WINNER: {props.winner}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PlayerWinMessage;","import React from 'react';\r\nimport ComponentBar from \"../../UI/ComponentBar/ComponentBar\";\r\nimport CurrentTurn from \"../InProgressGameBar/CurrentTurn/CurrentTurn\";\r\nimport ComponentBarItem from \"../../UI/ComponentBar/ComponentBarItem/ComponentBarItem\";\r\nimport PlayerWinMessage from \"./PlayerWinMessage/PlayerWinMessage\";\r\nimport Button from \"../../UI/Button/Button\";\r\n\r\nconst WinnerGameBar = (props) => {\r\n    return (\r\n        <ComponentBar height={\"130px\"} alignVertically={true}>\r\n            <ComponentBarItem color={\"#74ff99\"} width={20}>\r\n            </ComponentBarItem>\r\n            <ComponentBarItem color={\"#74ff99\"} width={60}>\r\n                <PlayerWinMessage winner={props.winner}/>\r\n            </ComponentBarItem>\r\n            <ComponentBarItem color={\"#74ff99\"} width={20}>\r\n                <Button onClick={props.resetGame}>New Game</Button>\r\n            </ComponentBarItem>\r\n        </ComponentBar>\r\n    );\r\n};\r\n\r\nexport default WinnerGameBar;","import React from 'react';\r\nimport InProgressGameBar from \"./InProgressGameBar/InProgressGameBar\";\r\nimport WinnerGameBar from \"./WinnerGameBar/WinnerGameBar\";\r\n\r\nconst GameBar = (props) => {\r\n    return (\r\n        <div>\r\n            {\r\n                props.winner !== \"\" ?\r\n                <WinnerGameBar winner={props.winner} resetGame={props.resetGame}/> :\r\n                <InProgressGameBar currentPlayer={props.currentPlayer} resetGame={props.resetGame}/>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GameBar;","import React, {Component} from 'react';\r\nimport GameBoard from \"../../components/GameBoard/GameBoard\";\r\n\r\nimport Aux from '../../hocs/Auxiliary/Auxiliary';\r\nimport CurrentTurn from \"../../components/GameBar/InProgressGameBar/CurrentTurn/CurrentTurn\";\r\nimport GameBar from \"../../components/GameBar/GameBar\";\r\n\r\nclass TicTacToe extends Component {\r\n    state = {\r\n        currentPlayer: \"X\",\r\n        winner: \"\",\r\n        squares: [\r\n            {id: 0, value: \"\", win: false},\r\n            {id: 1, value: \"\", win: false},\r\n            {id: 2, value: \"\", win: false},\r\n            {id: 3, value: \"\", win: false},\r\n            {id: 4, value: \"\", win: false},\r\n            {id: 5, value: \"\", win: false},\r\n            {id: 6, value: \"\", win: false},\r\n            {id: 7, value: \"\", win: false},\r\n            {id: 8, value: \"\", win: false}\r\n        ]\r\n\r\n    };\r\n\r\n    squareClickHandler = (index) => {\r\n        if (this.state.winner !== \"\") {\r\n            return;\r\n        }\r\n        //alert(index + \" Clicked\");\r\n        let squareArray = [...this.state.squares];\r\n        let currentPlayer = this.state.currentPlayer;\r\n        let prevPlayer = this.state.currentPlayer;\r\n        if (squareArray[index].value === \"\") {\r\n            squareArray[index].value = currentPlayer;\r\n            currentPlayer = currentPlayer === \"X\" ? \"O\" : \"X\";\r\n            this.setState({\r\n                squares: squareArray,\r\n                currentPlayer: currentPlayer\r\n            });\r\n        }\r\n        if (this.checkForWin(prevPlayer)) {\r\n            this.setState({\r\n                winner: prevPlayer\r\n            })\r\n        }\r\n        //TODO: Add in logic to draw game\r\n    };\r\n\r\n    possibleWins = [\r\n        [0,1,2],\r\n        [3,4,5],\r\n        [6,7,8],\r\n        [0,3,6],\r\n        [1,4,7],\r\n        [2,5,8],\r\n        [0,4,8],\r\n        [2,4,6]\r\n    ];\r\n\r\n    checkForWin = (player) => {\r\n        let squareArray = [...this.state.squares];\r\n        for (let possibleWin of this.possibleWins) {\r\n            let winner = true;\r\n            for (let squareIndex of possibleWin) {\r\n                if (squareArray[squareIndex].value !== player) {\r\n                    winner = false;\r\n                }\r\n            }\r\n            if (winner) {\r\n                for (let squareIndex of possibleWin) {\r\n                    squareArray[squareIndex].win = true;\r\n                }\r\n                this.setState({\r\n                    squares: squareArray\r\n                });\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    checkForDraw = () => {\r\n\r\n    };\r\n\r\n    resetGameHandler = () => {\r\n        let squareArray = [...this.state.squares];\r\n        for (let element of squareArray) {\r\n            element.value = \"\";\r\n            element.win = false;\r\n        }\r\n        this.setState({\r\n            squares: squareArray,\r\n            currentPlayer: \"X\",\r\n            winner: \"\"\r\n        });\r\n    };\r\n\r\n    render () {\r\n        return (\r\n            <Aux>\r\n                <GameBar currentPlayer={this.state.currentPlayer}\r\n                         resetGame={this.resetGameHandler}\r\n                         winner={this.state.winner}/>\r\n                <div style={{height: \"40px\"}}></div>\r\n                <GameBoard squareClick={this.squareClickHandler} squares={this.state.squares}/>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TicTacToe;","import React, {Component} from 'react';\nimport Layout from './components/Layout/Layout';\nimport TicTacToe from './containers/TicTacToe/TicTacToe';\n\nclass App extends Component {\n  render () {\n    return (\n        <div>\n          <Layout>\n              <TicTacToe/>\n          </Layout>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}